import torch
from torch import nn
import math

from src.utils.registry import REGISTRY

class DepthwiseSeparableConv(nn.Module):
    def __init__(self, cin, cout, kernel_size=3, padding=1, bias=True):
        super(DepthwiseSeparableConv, self).__init__()
        self.depthwise = nn.Conv2d(cin, cin, kernel_size=kernel_size, padding=padding, groups=cin, bias=bias)
        self.pointwise = nn.Conv2d(cin, cout, kernel_size=1, bias=bias)

    def forward(self, x):
        out = self.depthwise(x)
        out = self.pointwise(out)
        return out

@REGISTRY.register('codenet')  
class CodeNet(nn.Module):
    def __init__(self, num_classes=5, classify=True) -> None:
        super(CodeNet, self).__init__()
        self.classify = classify
        self.depthwise_conv = nn.ModuleList([DepthwiseSeparableConv(3, 1, kernel_size=(1, i), padding='same') for i in range(1, 11)])
        self.feat_extractor = nn.Sequential(
            nn.Conv2d(in_channels=10, out_channels=10, kernel_size=1),
            nn.ReLU(),
            nn.Conv2d(in_channels=10, out_channels=20, kernel_size=(1, 2)),
            nn.ReLU(),
            nn.Conv2d(in_channels=20, out_channels=40, kernel_size=1),
            nn.ReLU(),
            nn.Conv2d(in_channels=40, out_channels=80, kernel_size=(1, 3)),
            nn.ReLU(),
            nn.Conv2d(in_channels=80, out_channels=160, kernel_size=1),
            nn.ReLU(),
            nn.Conv2d(in_channels=160, out_channels=320, kernel_size=(1, 6)),
            nn.ReLU(),
            nn.AdaptiveMaxPool2d(output_size=1)
        )
        if classify:
            self.linear = nn.Linear(in_features=320, out_features=num_classes)

    def forward(self, x):
        feats = []
        for i in range(len(self.depthwise_conv)):
            val = self.depthwise_conv[i](x)
            feats.append(val)
        
        x = torch.cat(feats, dim=1)
        x = self.feat_extractor(x)

        if self.classify:
            x = self.linear(x.squeeze())
        
        return x
    
    def get_layer_groups(self):
        param_groups = {
            'classifier': [elem[1] for elem in self.linear.named_parameters()],
            'feature_extractor': [elem[1] for elem in self.feat_extractor.named_parameters()] + [elem[1] for elem in self.depthwise_conv.named_parameters()]
        }
        return param_groups