from torch import nn
from torchvision import models
from torchvision.models.efficientnet import EfficientNet_V2_S_Weights

from src.utils.registry import REGISTRY

@REGISTRY.register('efficientnet')
class EfficientNetModel(nn.Module):
    def __init__(self, num_classes=5, classify=True):
        super(EfficientNetModel, self).__init__()
        self.model = models.efficientnet_v2_s(weights=EfficientNet_V2_S_Weights.DEFAULT)
        
        in_feats = self.model.classifier[1].in_features
        dropout = self.model.classifier[0].p
        if classify:
            self.model.classifier = nn.Sequential(
                nn.Dropout(p=dropout, inplace=True), 
                nn.Linear(in_feats, num_classes))
        else:
            features = nn.ModuleList(self.resnet.children())[:-1]
            self.model = nn.Sequential(*features).append(nn.Flatten())
    
    def forward(self, inputs):
        return self.model(inputs)
    
    def get_layer_groups(self):
        linear_layers = [elem[1] for elem in filter(lambda param_tuple: 'fc' in param_tuple[0], self.model.named_parameters())]
        other_layers = [elem[1] for elem in filter(lambda param_tuple: 'fc' not in param_tuple[0], self.model.named_parameters())]
        param_groups = {
            'classifier': linear_layers,
            'feature_extractor': other_layers 
        }
        return param_groups