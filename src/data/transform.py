import math
import numpy as np
from PIL import Image
from hexbytes import HexBytes
from pyevmasm.evmasm import disassemble_hex, assemble_hex

SAFE_IDX = 4

def __get_one_hot_encoded_label(label):
    one_hot = np.zeros(5)
    for elem in label:
        if elem < SAFE_IDX:
            one_hot[elem] = 1
        elif elem > SAFE_IDX:
            one_hot[elem-1] = 1
    return one_hot

def __get_RGB_image(bytecode):
    image = np.frombuffer(bytecode, dtype=np.uint8)
    length = int(math.ceil(len(image)/3))
    image = np.pad(image, pad_width=(0, length*3 - len(image)))
    image = image.reshape((-1, 3))
    sqrt_len = int(math.ceil(math.sqrt(image.shape[0])))
    image = np.pad(image,  pad_width=((0, sqrt_len**2 - image.shape[0]),(0,0)))
    image = image.reshape((sqrt_len, sqrt_len, 3))
    image = Image.fromarray(image)
    return image

def __get_grayscale_image(bytecode):
    image = np.frombuffer(bytecode, dtype=np.uint8)
    sqrt_len = int(math.ceil(math.sqrt(image.shape[0])))
    image = np.pad(image,  pad_width=((0, sqrt_len**2 - image.shape[0])))
    image = image.reshape((sqrt_len, sqrt_len))
    image = np.stack((image,)*3, axis=-1)
    image = Image.fromarray(image)
    return image

def normalize_bytecode(bytecode):
    opcode_list = disassemble_hex(bytecode).split('\n')
    new_opcodes = []

    def is_odd(value):
        return (value % 2) != 0 

    for opcode in opcode_list:
        if 'PUSH' in opcode:
            value = opcode.strip().split(' ')[-1]
            if 'PUSH1 ' in opcode:
                new_opcode = f'PUSH2 {value}00'
            elif 'PUSH2 ' in opcode:
                new_opcode = opcode
            else:
                cut_val = 5 if is_odd(len(value.replace('0x', ''))) else 6
                new_opcode = f'PUSH2 {value[:cut_val]}'
        else:
            new_opcode = opcode
        new_opcodes.append(new_opcode)

    hex_string = assemble_hex(new_opcodes[0])

    for elem in new_opcodes[1:]:
        hex_string += assemble_hex(elem).replace('0x', '')
        if 'PUSH' not in elem:
            assert len(elem.split(' ')) == 1
            hex_string += '0000'
    
    return hex_string

def generate_grayscale_and_label(example):
    bytecode = normalize_bytecode(example['bytecode'])
    code = HexBytes(bytecode)
    example['image'] = __get_grayscale_image(code)
    example['label'] = __get_one_hot_encoded_label(example['slither'])
    return example

def generate_image_and_label(example):
    bytecode = normalize_bytecode(example['bytecode'])
    code = HexBytes(bytecode)
    example['image'] = __get_RGB_image(code)
    example['label'] = __get_one_hot_encoded_label(example['slither'])
    return example

def generate_signal_and_label(example):
    bytecode = normalize_bytecode(example['bytecode'])
    code = HexBytes(bytecode)
    image = np.frombuffer(code, dtype=np.uint8)
    example['image'] = image
    example['label'] = __get_one_hot_encoded_label(example['slither'])
    return example
